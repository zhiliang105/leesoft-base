<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.1.xsd
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx-4.1.xsd  
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

	<!-- 安全认证过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="${shiro.loginUrl.admin}" />
		<property name="filters">
			<map>
				<entry key="user" value-ref="customerUserFilter" />
				<entry key="logout" value-ref="customerLogoutFilter" />
			</map>
		</property>
		<property name="filterChainDefinitions" ref="shiroFilterChainDefinitions" />
	</bean>
	
	<!-- 自定义Shiro过滤器 -->
	<bean id="customerUserFilter" class="com.leeframework.core.security.shiro.filter.CustomerUserFilter" />
	<bean id="customerLogoutFilter" class="com.leeframework.core.security.shiro.filter.CustomerLogoutFilter">
		<property name="redirectUrl" value="${shiro.loginUrl.admin}" />
	</bean>

	<!-- Shiro权限过滤器定义 -->
	<!-- 该处只定义/admin权限过滤,如果出现/front或者/wap的权限获取,单独定义每种类型的过滤器进行处理,例如 /front/logout = logoutfront -->
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
			<value>
				${web.staticDir}/** = anon
				/validCode = anon
				${path.admin}/login = anon
				${path.admin}/logout = logout
				${path.admin}/** = user
			</value>
		</constructor-arg>
	</bean>

	<!-- 安全管理器securityManager -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="customRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="rememberMeManager" ref="rememberMeManager" />
		<property name="cacheManager" ref="shiroEhcacheManager" />
	</bean>

	<!-- 自定义Realm -->
	<bean id="customRealm" class="com.leeframework.core.security.shiro.CustomerRealm">
		<property name="cachingEnabled" value="false" />
		<property name="authenticationCachingEnabled" value="false" />
		<property name="authorizationCachingEnabled" value="${shiro.cache.authorizationCachingEnabled}" />
		<property name="authorizationCacheName" value="${shiro.cache.authorizationCacheName}" />
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="md5" />
				<property name="hashIterations" value="${shiro.auth.hashIterations}" />
			</bean>
		</property>
	</bean>

	<!-- RememberMeManager管理器，写cookie,取出cookie生成用户信息 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie">
			<bean class="org.apache.shiro.web.servlet.SimpleCookie">
				<constructor-arg value="shiroRememberMe" />
				<property name="maxAge" value="${shiro.cookie.rememberMe.maxAge}" />
			</bean>
		</property>
	</bean>

	<!-- 会话DAO -->
	<bean id="sessionDAO" class="com.leeframework.core.security.shiro.session.CustomerEnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="${shiro.cache.activeSessionsCacheName}" />
		<property name="sessionIdGenerator">
			<bean class="com.leeframework.core.security.shiro.ShiroSessionIdGenerator" />
		</property>
	</bean>

	<!-- 会话管理器,由shiro维护会话,直接废弃了Servlet容器的会话管理.重新定义 sessionIdCookie属性,解决遇到404页面session丢失的情况 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="${shiro.session.timeout}" />
		<property name="deleteInvalidSessions" value="true" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<property name="sessionDAO" ref="sessionDAO" />
		<property name="sessionIdCookie">
			<bean class="org.apache.shiro.web.servlet.SimpleCookie">
				<constructor-arg value="sessionIdCookie" />
				<property name="httpOnly" value="true" />
			</bean>
		</property>
	</bean>

	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler" class="com.leeframework.core.security.shiro.session.scheduler.QuartzSessionValidationScheduler">
		<property name="sessionValidationInterval" value="${shiro.session.interval}" />
		<property name="sessionManager" ref="sessionManager" />
		<!-- spring-context-quartz.xml -->
		<property name="scheduler" ref="scheduler"></property>
	</bean>

	<!-- Shiro缓存管理 -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile">
			<value>${shiro.cache.resourceName}</value>
		</property>
	</bean>
	
	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>
    
    <!-- 开启shiro权限注解支持 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
    
</beans>














